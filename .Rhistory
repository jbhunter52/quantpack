mutate(ticker = sp_name) %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' :=1)# get(tickers_ordered[i]) - get(tickers_ordered[j])) #%>%
View(df_)
df <- rates %>%
filter(ticker %in% tickers_ordered)
dfs <- list()
for (i in 1:length(tickers_ordered))
{
df_ <- df %>%
filter(ticker == tickers_ordered[i]) %>%
select(date, close) %>%
setNames(c('date',tickers_ordered[i]))
dfs[[i]] <- df_
}
dfspreads <- list()
cnt <- 1
for (i in length(tickers_ordered):2)
{
for (j in 1:i)
{
if (i==j) next
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
{
df_ <- dfs[[j]] %>%
left_join(dfs[[i]], by='date')
}
sp_name <- paste(tickers_ordered[i],tickers_ordered[j],sep='_')
df_ <- df_ %>%
drop_na() %>%
mutate(ticker = sp_name) %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' :=1)# get(tickers_ordered[i]) - get(tickers_ordered[j])) #%>%
select(c('date',sp_name))
dfspreads[[cnt]] <- df_
cnt <- cnt+1
}
}
df <- rates %>%
filter(ticker %in% tickers_ordered)
dfs <- list()
for (i in 1:length(tickers_ordered))
{
df_ <- df %>%
filter(ticker == tickers_ordered[i]) %>%
select(date, close) %>%
setNames(c('date',tickers_ordered[i]))
dfs[[i]] <- df_
}
dfspreads <- list()
cnt <- 1
for (i in length(tickers_ordered):2)
{
for (j in 1:i)
{
if (i==j) next
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
{
df_ <- dfs[[j]] %>%
left_join(dfs[[i]], by='date')
}
sp_name <- paste(tickers_ordered[i],tickers_ordered[j],sep='_')
df_ <- df_ %>%
drop_na() %>%
mutate(ticker = sp_name) %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' :=1) %>% # get(tickers_ordered[i]) - get(tickers_ordered[j])) #%>%
select(c('date',sp_name))
dfspreads[[cnt]] <- df_
cnt <- cnt+1
}
}
df_
df_ <- df_ %>%
drop_na() %>%
mutate(ticker = sp_name) %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' := get(tickers_ordered[i]) - get(tickers_ordered[j])) #%>%
df_ <- df_ %>%
drop_na() %>%
mutate(ticker = sp_name) %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' := get(tickers_ordered[i]) - get(tickers_ordered[j])) #%>%
if (i==j) next
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
i=1
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
{
df_ <- dfs[[j]] %>%
left_join(dfs[[i]], by='date')
}
sp_name <- paste(tickers_ordered[i],tickers_ordered[j],sep='_')
df_
df_ <- df_ %>%
drop_na() %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' := get(tickers_ordered[i]) - get(tickers_ordered[j])) #%>%
df_
df_ <- df_ %>%
drop_na() %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' := get(tickers_ordered[i]) - get(tickers_ordered[j])) %>%
select(c('date',sp_name))
df_
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
df <- rates %>%
filter(ticker %in% tickers_ordered)
dfs <- list()
for (i in 1:length(tickers_ordered))
{
df_ <- df %>%
filter(ticker == tickers_ordered[i]) %>%
select(date, close) %>%
setNames(c('date',tickers_ordered[i]))
dfs[[i]] <- df_
}
dfspreads <- list()
cnt <- 1
for (i in length(tickers_ordered):2)
{
for (j in 1:i)
{
if (i==j) next
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
{
df_ <- dfs[[j]] %>%
left_join(dfs[[i]], by='date')
}
sp_name <- paste(tickers_ordered[i],tickers_ordered[j],sep='_')
df_ <- df_ %>%
drop_na() %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' := get(tickers_ordered[i]) - get(tickers_ordered[j])) %>%
select(c('date',sp_name))
dfspreads[[cnt]] <- df_
cnt <- cnt+1
}
}
View(dfspreads)
df <- rates %>%
filter(ticker %in% tickers_ordered)
dfs <- list()
for (i in 1:length(tickers_ordered))
{
df_ <- df %>%
filter(ticker == tickers_ordered[i]) %>%
select(date, close) %>%
setNames(c('date',tickers_ordered[i]))
dfs[[i]] <- df_
}
dfspreads <- list()
cnt <- 1
for (i in length(tickers_ordered):2)
{
for (j in 1:i)
{
if (i==j) next
sub_tickers <- c(tickers_ordered[i], tickers_ordered[j])
if (min(dfs[[i]]$date) < min(dfs[[j]]$date))
{
df_ <- dfs[[i]] %>%
left_join(dfs[[j]], by='date')
}
else
{
df_ <- dfs[[j]] %>%
left_join(dfs[[i]], by='date')
}
sp_name <- paste(tickers_ordered[i],tickers_ordered[j],sep='_')
df_ <- df_ %>%
drop_na() %>%
mutate('{tickers_ordered[i]}_{tickers_ordered[j]}' := get(tickers_ordered[i]) - get(tickers_ordered[j])) %>%
select(c('date',sp_name))
dfspreads[[cnt]] <- df_
cnt <- cnt+1
}
}
most_days <- 0
mind <- Sys.Date()
for (i in 1:length(dfspreads))
{
if (min(dfspreads[[i]]$date) < mind)
{
most_days <- i
mind <- min(dfspreads[[i]]$date)
}
}
spreads <- dfspreads[[most_days]]
for (i in 1:length(dfspreads))
{
if (i == most_days) next
spreads <- spreads %>%
left_join(dfspreads[[i]], by='date')
}
View(spreads)
devtools::document()
warnings()
warnings()
devtools::document()
devtools::document()
rlang::last_error()
devtools::document()
pacman::p_load(tidyverse,arrow,RcppRoll,tidymodels,ranger,yardstick,vip)
pacman::p_load_current_gh('jbhunter52/quantpack')
nCr <- function(n, r)
{
return(as.integer(factorial(n) / factorial(r) / factorial(n-r)))
}
get_num_paths <- function(N,k)
{
s <- seq(1, k-1)
num <- sum(s*rep(N-1, length(s)))/factorial(k-1)
return(num)
}
get_split_map <- function(N, model_splits)
{
split_map <-matrix(0,N,model_splits)
col=1
for (base in seq(N))
{
#print(paste0('row=',base))
if (base+1 > N)
next
for (other in seq(base+1, N))
{
#print(paste0('base=',base,' col=',col))
split_map[base, col]=1
split_map[other, col]=1
col = col+1
}
}
for (row in seq(N))
{
for (i in seq(row+1, model_splits))
{
val=split_map[row, i]
prev_val=max(split_map[row, 1:i])
if (val == 0)
next
else if (val == 1)
split_map[row, i]=prev_val + 1
}
}
return (split_map)
}
N <- 6
k <- 2
nCr(N, N-k)
get_num_paths(N,k)
split_map <- get_split_map(N, nCr(N, N-k))
nCr(N, N-k)
split_map <- get_split_map(N, nCr(N, N-k))
tickers<- c('SPY','TLT')
df <- quantpack::get_tickers(tickers) %>%
select(-close) %>%
rename(close=adjusted_close) %>%
mutate(ticker = ifelse(ticker==ticker[1], 'asset1', 'asset2')) %>%
#mutate(mom_1 = lag(get_mom(close, 1))) %>%
# mutate(mom_3 = lag(get_mom(close, 3))) %>%
# mutate(mom_5 = lag(get_mom(close, 5))) %>%
# mutate(mom_10 = lag(get_mom(close, 10))) %>%
# mutate(mom_20 = lag(get_mom(close, 20))) %>%
# mutate(mom_40 = lag(get_mom(close, 40))) %>%
# mutate(mom_80 = lag(get_mom(close, 80))) %>%
# mutate(mom_120 = lag(get_mom(close, 120))) %>%
# mutate(mom_160 = lag(get_mom(close, 160))) %>%
# mutate(mom_200 = lag(get_mom(close, 200))) %>%
mutate(month = lubridate::month(date),
year = lubridate::year(date)) %>%
group_by(year, month, ticker) %>%
mutate(days_left = n()-row_number(),
mday = row_number()) %>%
group_by(ticker) %>%
mutate(last_month_close = ifelse(mday == 1, lag(close), NA),
lead_ret = (lead(close)/close)-1,
vol_zscore = (volume-roll_meanr(volume, n=60))/roll_sdr(volume, n=20)) %>%
group_by(month,year,ticker) %>%
fill(last_month_close, .direction = 'down') %>%
mutate(month_ret = (close/last_month_close)-1) %>%
select(date, ticker, close, vol_zscore, lead_ret, month_ret) %>%
pivot_wider(names_from='ticker', values_from = c(close, vol_zscore, lead_ret, month_ret)) %>%
mutate(month_ret_diff = month_ret_asset1-month_ret_asset2) %>%
mutate(next_day_ret = lead_ret_asset1 - lead_ret_asset2) %>%
#mutate(next_day_ret = lead_ret_asset2) %>%
group_by(month,year) %>%
mutate(mday = row_number()) %>%
ungroup() %>%
mutate(month_ret_diff_lag = ifelse(mday == 1, lag(month_ret_diff), NA)) %>%
group_by(year, month) %>%
fill(month_ret_diff_lag, .direction = 'down') %>%
drop_na() %>%
mutate(days_left = n()-row_number(),
mday = row_number())
df
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_day_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5)
data
data_split <- initial_time_split(data, prop=0.6)
data_train <- training(data_split)
data_test  <- testing(data_split)
# split into split number of groups
data_sets <- data_train %>%
ungroup() %>%
mutate(G = pmin(6,1+(row_number()-1) %/% as.integer(n()/(N))))
data_sets %>%
group_by(G) %>%
summarise(cnt=n())
get_train_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] == 0))
}
get_test_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] > 0))
}
data_sets %>% get_train_set(split_map, 1)
data_sets %>% get_test_set(split_map, 1)
rf <-
rand_forest(trees = 100) %>%
set_engine("ranger") %>%
set_args(importance='impurity') %>%
set_mode("classification")
set.seed(234)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = data_train %>% select(-date))
rf_fit
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_day_ret, days_left), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_day_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~days_left)
vip::vip(rf_fit)
rf_testing_pred %>%
filter(.pred_1 > 0.6) %>%
mutate(log_ret = log(next_day_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_day_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5)
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_day_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5)
data
pacman::p_load_current_gh('jbhunter52/quantpack', update=TRUE)
pacman::p_load(tidyverse,arrow,RcppRoll,tidymodels,ranger,yardstick,vip)
pacman::p_load_current_gh('jbhunter52/quantpack')
quantpack::get_all_rates()
devtools::document()
quantpack::get_all_rates()
quantpack::set_fredr_key()
quantpack::get_all_rates()
rates <- quantpack::get_all_rates()
spreads <- quantpack::get_rate_spreads(rates, quantpack::get_all_USrate_tickers())
View(rates)
quantpack::get_all_USrate_tickers()
spreads <- quantpack::get_rate_spreads(rates, quantpack::get_all_USrate_tickers())
rates <- quantpack::get_all_rates() %>% ungroup()
rates <- quantpack::get_all_rates() %>% ungroup()
spreads <- quantpack::get_rate_spreads(rates, quantpack::get_all_USrate_tickers())
spreads
devtools::document()
devtools::document()
spreads <- quantpack::get_rate_spreads(rates, quantpack::get_all_USrate_tickers())
spreads
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_day_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5) %>%
left_join(spreads, by='date')
data
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_day_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5) %>%
left_join(spreads, by='date') %>%
drop_na()
data
data_split <- initial_time_split(data, prop=0.6)
data_train <- training(data_split)
data_test  <- testing(data_split)
# split into split number of groups
data_sets <- data_train %>%
ungroup() %>%
mutate(G = pmin(6,1+(row_number()-1) %/% as.integer(n()/(N))))
data_sets %>%
group_by(G) %>%
summarise(cnt=n())
get_train_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] == 0))
}
get_test_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] > 0))
}
data_sets %>% get_train_set(split_map, 1)
data_sets %>% get_test_set(split_map, 1)
rf <-
rand_forest(trees = 100) %>%
set_engine("ranger") %>%
set_args(importance='impurity') %>%
set_mode("classification")
set.seed(234)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = data_train %>% select(-date))
rf_fit
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_day_ret, days_left), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_day_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~days_left)
vip::vip(rf_fit)
rf_testing_pred %>%
filter(.pred_1 > 0.6) %>%
mutate(log_ret = log(next_day_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.52) %>%
mutate(log_ret = log(next_day_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
