sd_rmse = sd(rmse)) %>%
ggplot(aes(lambda, alpha, z=mean_rmse)) + geom_raster(aes(fill = (mean_rmse))) +geom_contour_filled()
results %>%
group_by(lambda, alpha) %>%
summarise(mean_rmse = mean(rmse),
sd_rmse = sd(rmse)) %>%
ggplot(aes(lambda, alpha, z=mean_rmse)) + geom_raster(aes(fill = (sd_rmse))) +geom_contour_filled()
num_alphas <- 20
num_lambdas <- 20
mse_arr <- matrix(nrow=N, ncol=num_lambdas)
alphas <- seq(from=0.05, to=1, length.out=num_alphas)
lambdas <- seq(from=0.015, to=0, length.out=num_lambdas)
mses <- c()
mse_sd <- c()
results <- data.frame()
for (i in 1:num_alphas)
{
alpha <- alphas[i]
for (j in 1:N)
{
test_set <- data_sets %>% filter(G == j)
train_set <- data_sets %>% filter(G != j)
fit <- glmnet(train_set %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
train_set %>% pull(lead_ret_asset2),
alpha = alpha,
lambda = lambdas)
pred <- predict(fit,
newx=test_set %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
s = fit$lambda)
#plot(fit)
#coef(fit)
mse_mat <- (test_set$lead_ret_asset2 - pred)^2
rmse <- sqrt(colSums(mse_mat)/length(test_set$lead_ret_asset2))
results <- rbind(results, data.frame(
lambda = lambdas,
alpha = rep(alpha, length(lambdas)),
N = j,
rmse = rmse,
row.names = NULL
))
}
}
results %>%
group_by(lambda, alpha) %>%
summarise(mean_rmse = mean(rmse),
sd_rmse = sd(rmse)) %>%
ggplot(aes(lambda, alpha, z=mean_rmse)) + geom_raster(aes(fill = (mean_rmse))) +geom_contour_filled()
results %>%
group_by(lambda, alpha) %>%
summarise(mean_rmse = mean(rmse),
sd_rmse = sd(rmse)) %>%
ggplot(aes(lambda, alpha, z=mean_rmse)) + geom_raster(aes(fill = (sd_rmse))) +geom_contour_filled()
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
train_set %>% pull(lead_ret_asset2),
alpha = 0.5,
lambda = 0.005)
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.5,
lambda = 0.005)
View(fit)
coefs(fit)
coef(fit)
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.5,
lambda = 0.015)
coef(fit)
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.12,
lambda = 0.015)
coef(fit)
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.12,
lambda = 0.015)
pred <- predict(fit,
newx=test_set %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
s = fit$lambda)
pred <- predict(fit,
newx=data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
s = fit$lambda)
View(pred)
mse_mat <- (data_test$lead_ret_asset2 - pred)^2
mse <- (data_test$lead_ret_asset2 - pred)^2
mse <- ((data_test$lead_ret_asset2 - pred)^2)[,1]
rmse <- sqrt(mse/length(mse))
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.12,
lambda = 0.015)
pred <- predict(fit,
newx=data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
s = fit$lambda)
mse <- ((data_test$lead_ret_asset2 - pred)^2)[,1]
rmse <- sqrt(mse/length(mse))
rmse
coef(fit)
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.12,
lambda = 0.015)
pred <- predict(fit,
newx=data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
s = fit$lambda)
mse <- ((data_test$lead_ret_asset2 - pred)^2)[,1]
rmse <- sqrt(sum(mse)/length(mse))
rmse
coef(fit)
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.12,
lambda = 0.015)
pred <- predict(fit,
newx=data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
s = fit$lambda)
mse <- ((data_test$lead_ret_asset2 - pred)^2)[,1]
rmse <- sqrt(sum(mse)/length(mse))
rmse
coef(fit)
fit <- glmnet(data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
data_test %>% pull(lead_ret_asset2),
alpha = 0.12,
lambda = 0.015)
pred <- predict(fit,
newx=data_test %>% select(-date, -lead_ret_asset2) %>% as.matrix(),
s = fit$lambda)
mse <- ((data_test$lead_ret_asset2 - pred)^2)[,1]
rmse <- sqrt(sum(mse)/length(mse))
rmse
coef(fit)
Rcpp::sourceCpp("R/calc.cpp")
Rcpp::sourceCpp("R/calc.cpp")
Rcpp::sourceCpp('pairs_trade_days.cpp')
Rcpp::sourceCpp('calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
rm(bs)
rm(bsCpp)
Rcpp::sourceCpp('R/calc.cpp')
source('R/calc.cpp')
source('R/calc.cpp')
source('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
rep(1,2)
source('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
install.package(microbenchmark)
install.packages('microbenchmark')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
bs(100,90,0.5,0.02,0.2,'C')
bs_cpp(100,90,0.5,0.02,0.2,'C')
bs_cpp(rep(100,2),rep(90,2),rep(0.5,2),rep(0.02,2),rep(0.2,2),rep('C',2))
bs_cpp_p(rep(100,2),rep(90,2),rep(0.5,2),rep(0.02,2),rep(0.2,2),rep('C',2))
num <- 100
print(microbenchmark(
#forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 5
))
library(microbenchmark)
num <- 100
print(microbenchmark(
#forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 5
))
num <- 100
print(microbenchmark(
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 5
))
num <- 5
print(microbenchmark(
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 10000
))
num <- 10000
print(microbenchmark(
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 1
))
num <- 100000
print(microbenchmark(
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 1
))
num <- 1e6
print(microbenchmark(
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 1
))
num <- 1e6
print(microbenchmark(
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 5
))
num <- 10e6
print(microbenchmark(
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 5
))
num <- 1e6
print(microbenchmark(
r = test0 <- bs(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 5
))
for (i in 1:10) print(i)
test <- c(1,2)
test[1]
c('C','P')
cp <- c('C','P')
cp
cp == 'C'
as.numeric(cp == 'C')
Rcpp::sourceCpp('R/calc.cpp')
bs(100,90,0.5,0.02,0.2,'C')
cp
ifelse(c(0,1)==0, 'zero','one')
cp=='C'
Rcpp::sourceCpp('R/calc.cpp')
bs <-function(S, K, T, r, sig, type)
{
d1 <- (log(S/K) + (r + sig^2/2)*T) / (sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
isCall <- as.numeric(type == 'C')
pnorm_d1 <- pnorm(d1)
pnorm_d2 <- pnorm(d2)
LHS <- ifelse(isCall == 1,
S*pnorm_d1,
-S*pnorm_d2);
RHS <- ifelse(isCall == 1,
- K*exp(-R*T)*pnorm_d2,
K*exp(-R*T)*pnorm_d2);
value <- LHS+RHS
return(value)
}
bs(100,90,0.5,0.02,0.2,'C')
bs <-function(S, K, T, r, sig, type)
{
d1 <- (log(S/K) + (r + sig^2/2)*T) / (sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
isCall <- as.numeric(type == 'C')
pnorm_d1 <- pnorm(d1)
pnorm_d2 <- pnorm(d2)
LHS <- ifelse(isCall == 1,
S*pnorm_d1,
-S*pnorm_d2);
RHS <- ifelse(isCall == 1,
- K*exp(-r*T)*pnorm_d2,
K*exp(-r*T)*pnorm_d2);
value <- LHS+RHS
return(value)
}
bs(100,90,0.5,0.02,0.2,'C')
num <- 1e6
print(microbenchmark(
r = test0 <- bs(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
forloop = test1 <- bs_cpp(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
parallel = test2 <- bs_cpp_p(rep(100,num),rep(90,num),rep(0.5,num),rep(0.02,num),rep(0.2,num),rep('C',num)),
times = 5
))
print(microbenchmark(
r = test0 <- bs(100,90,0.5,0.02,0.2,'C'),
times = 1e6
))
8.16*1e6
8.16*1e6/1000
8.16/1000*1e6
Rcpp::sourceCpp('R/calc.cpp')
bs <-function(S, K, T, r, sig, type)
{
d1 <- (log(S/K) + (r + sig^2/2)*T) / (sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
isCall <- as.numeric(type == 'C')
pnorm_d1 <- pnorm(d1)
pnorm_d2 <- pnorm(d2)
LHS <- ifelse(isCall == 1,
S*pnorm_d1,
-S*pnorm_d2);
RHS <- ifelse(isCall == 1,
- K*exp(-r*T)*pnorm_d2,
K*exp(-r*T)*pnorm_d2);
value <- LHS+RHS
return(value)
}
timesTwo(42)
charTest(c("C","P"))
bs <-function(S, K, T, r, sig, type)
{
d1 <- (log(S/K) + (r + sig^2/2)*T) / (sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
isCall <- as.numeric(type == 'C')
pnorm_d1 <- pnorm(d1)
pnorm_d2 <- pnorm(d2)
LHS <- ifelse(isCall == 1,
S*pnorm_d1,
-S*pnorm_d2);
RHS <- ifelse(isCall == 1,
- K*exp(-r*T)*pnorm_d2,
K*exp(-r*T)*pnorm_d2);
value <- LHS+RHS
return(value)
}
timesTwo(42)
bs(100,90,0.5,0.02,0.2,'C')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::any(c(1,0) == 1)
Rcpp::any(c(1,0) == 1)
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 10e5
))
28.6/1000
28.6/1000*10e5
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 1000,
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 1000, unit='ms'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 1000, unit='ms'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 1000, unit='s'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 10000, unit='s'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 1e5, unit='s'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 10e3, unit='s'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 10e4, unit='s'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 1e6, unit='s'
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 10e6, unit='s'
))
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 10e5
))
print(microbenchmark(
t = test0 <- bs_iv_p(100,90,0.5,0.02,market,'C'),
times = 10e5
))
print(microbenchmark(
t = test0 <- bs_iv(100,90,0.5,0.02,market,'C'),
times = 10e5
))
print(microbenchmark(
t = test0 <- bs_iv_p(100,90,0.5,0.02,market,'C'),
times = 10e5
))
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
bs_iv_cpp(rep(100,2),rep(90,2),rep(0.5,2),rep(0.02,2),rep(market,2),rep('C',2))
source("C:/Users/Jared/GoogleDrive/R/quantpack/R/calc.R", echo=TRUE)
Rcpp::sourceCpp('R/calc.cpp')
Rcpp::sourceCpp('R/calc.cpp')
source("C:/Users/Jared/GoogleDrive/R/quantpack/R/calc.R", echo=TRUE)
Rcpp.package.skeleton("quantpack")
Rcpp::Rcpp.package.skeleton('quantpack')
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Sys.getenv('USER')
Sys.getenv('USERNAME)
Sys.getenv('USERNAME')
paste()
paste('C:\\Users\\', Sys.getenv('USERNAME'), '\\GoogleDrive\\R\\quantpack')
paste0('C:\\Users\\', Sys.getenv('USERNAME'), '\\GoogleDrive\\R\\quantpack')
paste0('C:\\Users\\', Sys.getenv('USERNAME'), '\\GoogleDrive\\R\\quantpack\\')
devtools::install(paste0('C:\\Users\\', Sys.getenv('USERNAME'), '\\GoogleDrive\\R\\quantpack\\'))
install.packages('quantpack',remove=TRUE)
install.packages("quantpack", remove = TRUE)
devtools::install(paste0('C:\\Users\\', Sys.getenv('USERNAME'), '\\GoogleDrive\\R\\quantpack\\'))
library('quantpack')
doc quantpack
?quantpack
?quantpack
Rcpp::compileAttributes()
devtools::document()
devtools::install(paste0('C:\\Users\\', Sys.getenv('USERNAME'), '\\GoogleDrive\\R\\quantpack\\'))
detach("package:base", unload = TRUE)
library(base, lib.loc = "C:/Program Files/R/R-4.2.1/library")
install.packages("htmltools")
library(quantpack)
detach("package:quantpack", unload = TRUE)
install.packages(c("arrow", "bit", "cli", "data.table", "dials", "digest", "fontawesome", "forecast", "future", "future.apply", "gert", "ggplot2", "glmnet", "globals", "gower", "htmlwidgets", "httpuv", "infer", "jsonlite", "lava", "lhs", "listenv", "lubridate", "markdown", "Matrix", "matrixStats", "padr", "parallelly", "parsnip", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "processx", "progressr", "ps", "purrr", "ragg", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "recipes", "reticulate", "rgl", "roxygen2", "rpart", "rsample", "sass", "shiny", "slider", "stringi", "stringr", "survival", "svglite", "testthat", "tibbletime", "timechange", "timeDate", "vctrs", "whisker", "workflows", "xfun", "zip"))
install.packages(c("arrow", "bit", "cli", "data.table", "dials", "digest", "fontawesome", "forecast", "future", "future.apply", "gert", "ggplot2", "glmnet", "globals", "gower", "htmlwidgets", "httpuv", "infer", "jsonlite", "lava", "lhs", "listenv", "lubridate", "markdown", "Matrix", "matrixStats", "padr", "parallelly", "parsnip", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "processx", "progressr", "ps", "purrr", "ragg", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "recipes", "reticulate", "rgl", "roxygen2", "rpart", "rsample", "sass", "shiny", "slider", "stringi", "stringr", "survival", "svglite", "testthat", "tibbletime", "timechange", "timeDate", "vctrs", "whisker", "workflows", "xfun", "zip"))
install.packages(c("arrow", "bit", "cli", "data.table", "dials", "digest", "fontawesome", "forecast", "future", "future.apply", "gert", "ggplot2", "glmnet", "globals", "gower", "htmlwidgets", "httpuv", "infer", "jsonlite", "lava", "lhs", "listenv", "lubridate", "markdown", "Matrix", "matrixStats", "padr", "parallelly", "parsnip", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "processx", "progressr", "ps", "purrr", "ragg", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "recipes", "reticulate", "rgl", "roxygen2", "rpart", "rsample", "sass", "shiny", "slider", "stringi", "stringr", "survival", "svglite", "testthat", "tibbletime", "timechange", "timeDate", "vctrs", "whisker", "workflows", "xfun", "zip"))
install.packages(c("arrow", "bit", "cli", "data.table", "dials", "digest", "fontawesome", "forecast", "future", "future.apply", "gert", "ggplot2", "glmnet", "globals", "gower", "htmlwidgets", "httpuv", "infer", "jsonlite", "lava", "lhs", "listenv", "lubridate", "markdown", "Matrix", "matrixStats", "padr", "parallelly", "parsnip", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "processx", "progressr", "ps", "purrr", "ragg", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "recipes", "reticulate", "rgl", "roxygen2", "rpart", "rsample", "sass", "shiny", "slider", "stringi", "stringr", "survival", "svglite", "testthat", "tibbletime", "timechange", "timeDate", "vctrs", "whisker", "workflows", "xfun", "zip"))
