get_sma <- function(x, n=20) {
return(x / roll_meanr(x, n = n) - 1)
}
#SMA ratio
get_psma <- function(x, n=3, k=20) {
return(roll_meanr(x, n = n) / roll_meanr(x, n = k) - 1)
}
#range over recent price history
get_rrp <- function(x, n=20) {
return((x - roll_meanr(x, n = n)) / roll_sdr(x, n = n))
}
#absolute range
get_absr <- function(x, n=20){
minr <- roll_minr(x, n = n)
maxr <- roll_maxr(x, n = n)
range <- maxr-minr
return(
(x - minr) / (span)
)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(rrp = get_psma(close, n=20)) %>%
mutate(absr = get_absr(close, n=20))
#time series momentum
get_mom <- function(x, n=1) {
return ((x / lag(x,n=n))-1)
}
#price to simple moving average
get_sma <- function(x, n=20) {
return(x / roll_meanr(x, n = n) - 1)
}
#SMA ratio
get_psma <- function(x, n=3, k=20) {
return(roll_meanr(x, n = n) / roll_meanr(x, n = k) - 1)
}
#range over recent price history
get_rrp <- function(x, n=20) {
return((x - roll_meanr(x, n = n)) / roll_sdr(x, n = n))
}
#absolute range
get_absr <- function(x, n=20){
minr <- roll_minr(x, n = n)
maxr <- roll_maxr(x, n = n)
range <- maxr-minr
return(
(x - minr) / (range)
)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(rrp = get_psma(close, n=20)) %>%
mutate(absr = get_absr(close, n=20))
#time series momentum
get_mom <- function(x, n=1) {
return ((x / lag(x,n=n))-1)
}
#price to simple moving average
get_sma <- function(x, n=20) {
return(x / roll_meanr(x, n = n) - 1)
}
#SMA ratio
get_psma <- function(x, n=3, k=20) {
return(roll_meanr(x, n = n) / roll_meanr(x, n = k) - 1)
}
#range over recent price history
get_rrp <- function(x, n=20) {
return((x - roll_meanr(x, n = n)) / roll_sdr(x, n = n))
}
#absolute range
get_absr <- function(x, n=20){
minr <- roll_minr(x, n = n)
maxr <- roll_maxr(x, n = n)
range <- maxr-minr
return(
(x - minr) / (0.5*range)
)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(rrp = get_psma(close, n=20)) %>%
mutate(absr = get_absr(close, n=20))
#time series momentum
get_mom <- function(x, n=1) {
return ((x / lag(x,n=n))-1)
}
#price to simple moving average
get_sma <- function(x, n=20) {
return(x / roll_meanr(x, n = n) - 1)
}
#SMA ratio
get_psma <- function(x, n=3, k=20) {
return(roll_meanr(x, n = n) / roll_meanr(x, n = k) - 1)
}
#range over recent price history
get_rrp <- function(x, n=20) {
return((x - roll_meanr(x, n = n)) / roll_sdr(x, n = n))
}
#absolute range
get_absr <- function(x, n=20){
minr <- roll_minr(x, n = n)
maxr <- roll_maxr(x, n = n)
range <- maxr-minr
return(
(x - minr) / (range) - 0.5
)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(rrp = get_psma(close, n=20)) %>%
mutate(absr = get_absr(close, n=20))
#time series momentum
get_mom <- function(x, n=1) {
return ((x / lag(x,n=n))-1)
}
#price to simple moving average
get_sma <- function(x, n=20) {
return(x / roll_meanr(x, n = n) - 1)
}
#SMA ratio
get_psma <- function(x, n=3, k=20) {
return(roll_meanr(x, n = n) / roll_meanr(x, n = k) - 1)
}
#range over recent price history
get_rrp <- function(x, n=20) {
return((x - roll_meanr(x, n = n)) / roll_sdr(x, n = n))
}
#absolute range
get_absr <- function(x, n=20){
minr <- roll_minr(x, n = n)
maxr <- roll_maxr(x, n = n)
range <- maxr-minr
return(
2*((x - minr) / (range)) - 0.5
)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(rrp = get_psma(close, n=20)) %>%
mutate(absr = get_absr(close, n=20))
#time series momentum
get_mom <- function(x, n=1) {
return ((x / lag(x,n=n))-1)
}
#price to simple moving average
get_sma <- function(x, n=20) {
return(x / roll_meanr(x, n = n) - 1)
}
#SMA ratio
get_psma <- function(x, n=3, k=20) {
return(roll_meanr(x, n = n) / roll_meanr(x, n = k) - 1)
}
#range over recent price history
get_rrp <- function(x, n=20) {
return((x - roll_meanr(x, n = n)) / roll_sdr(x, n = n))
}
#absolute range
get_absr <- function(x, n=20){
minr <- roll_minr(x, n = n)
maxr <- roll_maxr(x, n = n)
return(
2*((x - minr) / (maxr-minr)) - 1
)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(sma20 = get_sma(close, n=4)) %>%
mutate(rrp = get_psma(close, n=20)) %>%
mutate(absr = get_absr(close, n=20))
#rolling days since high
get_rolling_dsh <- function(x, n=20)
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
tibbletime::rollify(
function(x, n) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (n/2)
return(days_since_high)
},
window = n, na_value = NA)
}
#time series momentum
get_mom <- function(x, n=1) {
return ((x / lag(x,n=n))-1)
}
#price to simple moving average
get_sma <- function(x, n=20) {
return(x / roll_meanr(x, n = n) - 1)
}
#SMA ratio
get_psma <- function(x, n=3, k=20) {
return(roll_meanr(x, n = n) / roll_meanr(x, n = k) - 1)
}
#range over recent price history
get_rrp <- function(x, n=20) {
return((x - roll_meanr(x, n = n)) / roll_sdr(x, n = n))
}
#absolute range from {-1,1} over period
get_absr <- function(x, n=20){
minr <- roll_minr(x, n = n)
maxr <- roll_maxr(x, n = n)
return(
2*((x - minr) / (maxr-minr)) - 1
)
}
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
tibbletime::rollify(
function(x, n) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (n/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_rolling_dsh(close, n=10))
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
tibbletime::rollify(
function(x, n) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (n/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_rolling_dsh(close, n=10))
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
tibbletime::rollify(
function(x) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (n/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_rolling_dsh(close, n=10))
tibbletime::rollify(
function(x) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (n/2)
return(days_since_high)
},
window = n, na_value = NA)
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
tibbletime::rollify(
function(x, window=n) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (window/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(sma20 = get_rolling_dsh(close, n=10))
df %>%
mutate(mom1 = get_mom(close, n=3)) %>%
mutate(dsh = get_rolling_dsh(close, n=10))
df %>%
mutate(dsh = get_rolling_dsh(close, n=10))
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
tibbletime::rollify(
function(x, n) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (window/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(dsh = get_rolling_dsh(close, n=10))
rep(5,5)
rep(5,5)
n <- rep(n, length(x))
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
n <- rep(n, length(x))
tibbletime::rollify(
function(x, n) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (window/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(dsh = get_rolling_dsh(close, n=10))
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
n <- rep(n, length(x))
tibbletime::rollify(
function(x, n) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (n/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(dsh = get_rolling_dsh(close, n=10))
#rolling days since high
get_rolling_dsh <- function(x, n=20)
{
nn <- rep(n, length(x))
tibbletime::rollify(
function(x, nn) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (nn/2)
return(days_since_high)
},
window = n, na_value = NA)
}
df %>%
mutate(dsh = get_rolling_dsh(close, n=10))
n=20
nn <- rep(n, length(x))
x=df$close
nn <- rep(n, length(x))
tibbletime::rollify(
function(x, nn) {
idx_of_high <- which.max(x)
days_since_high <- -length(x) + idx_of_high + (nn/2)
return(days_since_high)
},
window = n, na_value = NA)
devtools::create('quantpack')
devtools::document()
setwd("~/")
devtools::document()
setwd("~/quantpack")
devtools::document()
devtools::document()
rm(list = c("get_absr", "get_mom", "get_psma", "get_rrp", "get_sma"))
devtools::document()
rm(list = c("get_ticker"))
devtools::document()
pacman::p_load(tidyverse, arrow)
RcppRoll
devtools::install('quantpack')
devtools::install('c:\\users\\jared\\documents\\quantpack')
quantpack::get_ticker('BA', source='EODHistorical', 'EOD')
df <- quantpack::get_ticker('BA', source='EODHistorical', 'EOD')
df
pacman::p_load(tidyverse, arrow)
devtools::install('c:\\users\\jared\\documents\\quantpack')
devtoools::document()
devtools
devtools::document()
pacman::p_load(tidyverse, arrow)
devtools::install('c:\\users\\jared\\documents\\quantpack')
df <- quantpack::get_ticker('BA', source='EODHistorical', 'EOD')
df
devtools::document()
pacman::p_load(tidyverse, arrow)
devtools::install('c:\\users\\jared\\documents\\quantpack')
df <- quantpack::get_ticker('BA', source='EODHistorical', 'EOD')
df
devtools::document()
pacman::p_load(tidyverse, arrow)
devtools::install('c:\\users\\jared\\documents\\quantpack')
df <- quantpack::get_ticker('BA', source='EODHistorical', 'EOD')
df
df <- quantpack::get_ticker(c('BA','LMT'), source='EODHistorical', 'EOD')
```{r}
df <- quantpack::get_ticker(c('BA','LMT'), source='EODHistorical', 'EOD')
df <- quantpack::get_ticker(c('BA','LMT'), source='EODHistorical', 'EOD')
get_source_dir <- function(source)
{
if (source == 'EODHistorical')
return(EOD_DIR)
}
#' Load time series data from ticker and inputs
#'
#' @param ticker Name of ticker
#' @param source Data source (EODHistorical)
#' @param interval Interval of data to load (1m,1D,EOD)
#' @return data.frame
#' @export
get_ticker <- function(ticker, source='EODHistorical', interval='1D')
{
if (source == 'EODHistorical' && interval == '1D') interval <- 'EOD'
source_dir <- get_source_dir(source)
if (source == 'EODHistorical')
{
file_ext <- '.parquet'
source_dir <- EOD_DIR
file <- paste0(EOD_DIR,'\\',interval,'\\',ticker,file_ext)
df <- read_parquet(file) %>%
mutate(date = as.Date(date)) %>%
mutate(ticker = ticker) %>%
select(date, ticker, everything())
}
}
#' Load time series data from mulitple tickers
#'
#' @param ticker Vector of tickers
#' @param source Data source (EODHistorical)
#' @param interval Interval of data to load (1m,1D,EOD)
#' @return data.frame
#' @export
get_tickers <- function(tickers, source='EODHistorical', interval='1D')
{
data.table::rbindlist(lapply(tickers, get_ticker, source=source, interval=interval))
}
get_tickers(c('LMT','BA'))
EOD_DIR <- '\\\\amd\\d\\EODHistorical'
data.table::rbindlist(lapply(tickers, get_ticker, source=source, interval=interval))
get_tickers(tickers=c('LMT','BA'))
devtools::document()
pacman::p_load(tidyverse, arrow)
devtools::install('c:\\users\\jared\\documents\\quantpack')
df <- quantpack::get_ticker('BA', source='EODHistorical', 'EOD')
df
df <- quantpack::get_ticker(c('BA','LMT'), source='EODHistorical', 'EOD')
df <- quantpack::get_ticker(tickers=c('BA','LMT'), source='EODHistorical', 'EOD')
df <- quantpack::get_ticker(tickers=c('BA','LMT'), source='EODHistorical', 'EOD')
df
df <- quantpack::get_tickers(tickers=c('BA','LMT'), source='EODHistorical', 'EOD')
df <- quantpack::get_tickers(tickers=c('BA','LMT'), source='EODHistorical', 'EOD')
df
df <- quantpack::get_tickers(tickers=c(,'LMT'), source='EODHistorical', 'EOD')
df <- quantpack::get_tickers(tickers=c('LMT'), source='EODHistorical', 'EOD')
df
df <- quantpack::get_tickers(tickers=c('BA','LMT'), source='EODHistorical', 'EOD')
df
df <- quantpack::get_tickers(c('BA','LMT'), source='EODHistorical', 'EOD')
df
df <- quantpack::get_tickers(c('BA','LMT'), source='EODHistorical', '1D')
df
tickers <- c('DGS1MO','DGS3MO','DGS6MO','DGS1','DGS2','DGS3','DGS5','DGS7','DGS10','DGS20','DGS30')
rates <- data.table::rbindlist(lapply(tickers, get_rate)) %>%
group_by(ticker) %>%
fill(close, .direction='down')
library(tidyverse)
library(fredr)
tickers <- c('DGS1MO','DGS3MO','DGS6MO','DGS1','DGS2','DGS3','DGS5','DGS7','DGS10','DGS20','DGS30')
rates <- data.table::rbindlist(lapply(tickers, get_rate)) %>%
group_by(ticker) %>%
fill(close, .direction='down')
#' Load time series data from FRED
#'
#' @param ticker Name of ticker from FRED
#' @return data.frame
#' @export
get_rate <- function(ticker)
{
fredr(series_id = ticker) %>%
rename(ticker=series_id,
close=value) %>%
select(date, ticker, close)
}
tickers <- c('DGS1MO','DGS3MO','DGS6MO','DGS1','DGS2','DGS3','DGS5','DGS7','DGS10','DGS20','DGS30')
rates <- data.table::rbindlist(lapply(tickers, get_rate)) %>%
group_by(ticker) %>%
fill(close, .direction='down')
set.getevn('fredr_key')
Sys.getevn('fredr_key')
Sys.getenv('fredr_key')
Sys.getenv('fred_key')
Sys.getenv()
library(tidyverse, fredr)
source("C:/Users/Jared/GoogleDrive/R/quantpack/R/fred.R", echo=TRUE)
source("C:/Users/Jared/GoogleDrive/R/quantpack/R/fred.R", echo=TRUE)
library(tidyverse, fredr)
#' Sets FRED API Key from environment variable, fred_key
#'
#' @return data.frame
#' @export
set_fredr_key <- function()
{
key <- Sys.getenv('fred_key')
if (length(key) < 1)
print('Cannot find fred_key env variable')
fredr::fredr_set_key(key)
}
set_fredr_key()
fredr::fredr_get_key()
fredr::fredr_has_key()
key <- Sys.getenv('fred_key')
if (length(key) < 1)
print('Cannot find fred_key env variable')
fredr::fredr_set_key(key)
key <- Sys.getenv('fred_key')
