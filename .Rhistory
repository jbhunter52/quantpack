predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~mdays)
acc <- c()
for (i in 1:N)
{
test_set <- data_sets %>% filter(G == i)
train_set <- data_sets %>% filter(G != i)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = train_set %>% select(-date, -G))
rf_testing_pred <- predict(rf_fit, test_set) %>%
bind_cols(predict(rf_fit, test_set, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(test_set %>% select(date, ret_sign)) %>%
left_join(df %>% ungroup() %>% select(date, next_ret, days_left), by='date')
rf_testing_pred
acc[i] <- rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class) %>%
pull(.estimate) %>% first()
}
acc
mean(acc)
sd(acc)
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~mdays)
rf_testing_pred
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left, mdays), by='date')
df
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left, mday), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~mday)
rf_testing_pred %>%
filter(.pred_1 > 0.5,
mday >= 1,
mday <= 5 %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.5,
mday >= 1,
mday <= 5) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5) %>%
#left_join(spreads, by='date') %>%
left_join(vix, by='date') %>%
left_join(vix3m, by='date') %>%
mutate(ivts = vix/vix3m) %>%
drop_na()
data_split <- initial_time_split(data, prop=0.6)
data_train <- training(data_split)
data_test  <- testing(data_split)
# split into split number of groups
data_sets <- data_train %>%
ungroup() %>%
mutate(G = pmin(6,1+(row_number()-1) %/% as.integer(n()/(N))))
data_sets %>%
group_by(G) %>%
summarise(cnt=n())
get_train_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] == 0))
}
get_test_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] > 0))
}
data_sets %>% get_train_set(split_map, 1)
data_sets %>% get_test_set(split_map, 1)
rf <-
rand_forest(trees = 100) %>%
set_engine("ranger") %>%
set_args(importance='impurity') %>%
set_mode("classification")
set.seed(234)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = data_train %>% select(-date))
rf_fit
acc <- c()
for (i in 1:N)
{
test_set <- data_sets %>% filter(G == i)
train_set <- data_sets %>% filter(G != i)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = train_set %>% select(-date, -G))
rf_testing_pred <- predict(rf_fit, test_set) %>%
bind_cols(predict(rf_fit, test_set, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(test_set %>% select(date, ret_sign)) %>%
left_join(df %>% ungroup() %>% select(date, next_ret, days_left), by='date')
rf_testing_pred
acc[i] <- rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class) %>%
pull(.estimate) %>% first()
}
acc
mean(acc)
sd(acc)
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left, mday), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~mday)
vip::vip(rf_fit)
rf_testing_pred %>%
filter(.pred_1 > 0.5,
mday >= 1,
mday <= 5) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
quantpack::fred_set_key()
rates <- quantpack::fred_get_all_rates()
rate_tickers <- quantpack::fred_get_all_us_rate_tickers()
spreads <- quantpack:::fred_get_rate_spreads(rates, rate_tickers)
vix <- quantpack::load_ticker('VIX', 'EODHistorical','EOD_INDX') %>%
select(date, close) %>%
rename(vix=close)
vix3m <- quantpack::load_ticker('VIX3M', 'EODHistorical','EOD_INDX') %>%
select(date, close) %>%
rename(vix3m=close)
vix3m
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5) %>%
left_join(spreads, by='date') %>%
left_join(vix, by='date') %>%
left_join(vix3m, by='date') %>%
mutate(ivts = vix/vix3m) %>%
drop_na()
data
data_split <- initial_time_split(data, prop=0.6)
data_train <- training(data_split)
data_test  <- testing(data_split)
# split into split number of groups
data_sets <- data_train %>%
ungroup() %>%
mutate(G = pmin(6,1+(row_number()-1) %/% as.integer(n()/(N))))
data_sets %>%
group_by(G) %>%
summarise(cnt=n())
get_train_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] == 0))
}
get_test_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] > 0))
}
data_sets %>% get_train_set(split_map, 1)
data_sets %>% get_test_set(split_map, 1)
rf <-
rand_forest(trees = 100) %>%
set_engine("ranger") %>%
set_args(importance='impurity') %>%
set_mode("classification")
set.seed(234)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = data_train %>% select(-date))
rf_fit
acc <- c()
for (i in 1:N)
{
test_set <- data_sets %>% filter(G == i)
train_set <- data_sets %>% filter(G != i)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = train_set %>% select(-date, -G))
rf_testing_pred <- predict(rf_fit, test_set) %>%
bind_cols(predict(rf_fit, test_set, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(test_set %>% select(date, ret_sign)) %>%
left_join(df %>% ungroup() %>% select(date, next_ret, days_left), by='date')
rf_testing_pred
acc[i] <- rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class) %>%
pull(.estimate) %>% first()
}
acc
mean(acc)
sd(acc)
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left, mday), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~mday)
vip::vip(rf_fit)
quantpack::fred_set_key()
rates <- quantpack::fred_get_all_rates()
rate_tickers <- quantpack::fred_get_all_us_rate_tickers()
spreads <- quantpack:::fred_get_rate_spreads(rates, rate_tickers)
vix <- quantpack::load_ticker('VIX', 'EODHistorical','EOD_INDX') %>%
select(date, close) %>%
rename(vix=close)
vix3m <- quantpack::load_ticker('VIX3M', 'EODHistorical','EOD_INDX') %>%
select(date, close) %>%
rename(vix3m=close)
vix3m
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5) %>%
#left_join(spreads, by='date') %>%
left_join(vix, by='date') %>%
#left_join(vix3m, by='date') %>%
# mutate(ivts = vix/vix3m) %>%
drop_na()
data
data_split <- initial_time_split(data, prop=0.6)
data_train <- training(data_split)
data_test  <- testing(data_split)
# split into split number of groups
data_sets <- data_train %>%
ungroup() %>%
mutate(G = pmin(6,1+(row_number()-1) %/% as.integer(n()/(N))))
data_sets %>%
group_by(G) %>%
summarise(cnt=n())
get_train_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] == 0))
}
get_test_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] > 0))
}
data_sets %>% get_train_set(split_map, 1)
data_sets %>% get_test_set(split_map, 1)
rf <-
rand_forest(trees = 100) %>%
set_engine("ranger") %>%
set_args(importance='impurity') %>%
set_mode("classification")
set.seed(234)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = data_train %>% select(-date))
rf_fit
acc <- c()
for (i in 1:N)
{
test_set <- data_sets %>% filter(G == i)
train_set <- data_sets %>% filter(G != i)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = train_set %>% select(-date, -G))
rf_testing_pred <- predict(rf_fit, test_set) %>%
bind_cols(predict(rf_fit, test_set, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(test_set %>% select(date, ret_sign)) %>%
left_join(df %>% ungroup() %>% select(date, next_ret, days_left), by='date')
rf_testing_pred
acc[i] <- rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class) %>%
pull(.estimate) %>% first()
}
acc
mean(acc)
sd(acc)
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left, mday), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~mday)
rf_testing_pred %>%
filter(.pred_1 > 0.5,
mday >= 1,
mday <= 5) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.5) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.52) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.55) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.56) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.6) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.08) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.9) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.8) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.5) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
vip::vip(rf_fit)
vix <- quantpack::load_ticker('VIX', 'EODHistorical','EOD_INDX') %>%
select(date, close) %>%
rename(vix=close)
vix3m <- quantpack::load_ticker('VIX3M', 'EODHistorical','EOD_INDX') %>%
select(date, close) %>%
rename(vix3m=close)
vix3m
data <- df %>%
ungroup() %>%
mutate(ret_sign = ifelse(next_ret>0, 1, 0)) %>%
mutate(ret_sign = as.factor(ret_sign)) %>%
select(date, vol_zscore_asset1, vol_zscore_asset2, month_ret_asset1, month_ret_asset2, month_ret_diff, month_ret_diff_lag,ret_sign, days_left, mday) %>%
filter(mday <=5 | days_left<=5) %>%
select(-mday, -days_left) %>%
#left_join(spreads, by='date') %>%
left_join(vix, by='date') %>%
#left_join(vix3m, by='date') %>%
# mutate(ivts = vix/vix3m) %>%
drop_na()
data
data_split <- initial_time_split(data, prop=0.6)
data_train <- training(data_split)
data_test  <- testing(data_split)
# split into split number of groups
data_sets <- data_train %>%
ungroup() %>%
mutate(G = pmin(6,1+(row_number()-1) %/% as.integer(n()/(N))))
data_sets %>%
group_by(G) %>%
summarise(cnt=n())
get_train_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] == 0))
}
get_test_set <- function(df, split_map, set_num)
{
df %>%
ungroup() %>%
filter(G %in% which(split_map[,set_num] > 0))
}
data_sets %>% get_train_set(split_map, 1)
data_sets %>% get_test_set(split_map, 1)
rf <-
rand_forest(trees = 100) %>%
set_engine("ranger") %>%
set_args(importance='impurity') %>%
set_mode("classification")
set.seed(234)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = data_train %>% select(-date))
rf_fit
acc <- c()
for (i in 1:N)
{
test_set <- data_sets %>% filter(G == i)
train_set <- data_sets %>% filter(G != i)
rf_fit <- rf %>%
fit(ret_sign ~ ., data = train_set %>% select(-date, -G))
rf_testing_pred <- predict(rf_fit, test_set) %>%
bind_cols(predict(rf_fit, test_set, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(test_set %>% select(date, ret_sign)) %>%
left_join(df %>% ungroup() %>% select(date, next_ret, days_left), by='date')
rf_testing_pred
acc[i] <- rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class) %>%
pull(.estimate) %>% first()
}
acc
mean(acc)
sd(acc)
rf_testing_pred <-
predict(rf_fit, data_test) %>%
bind_cols(predict(rf_fit, data_test, type = "prob")) %>%
# Add the true outcome data back in
bind_cols(data_test %>%
select(date, ret_sign)) %>%
left_join(df %>% select(date, next_ret, days_left, mday), by='date')
rf_testing_pred
rf_testing_pred %>%                # training set predictions
accuracy(truth = ret_sign, .pred_class)
rf_testing_pred %>%
ggplot(aes(x=next_ret, y=.pred_1-0.5)) +
geom_point() + geom_smooth(method='lm') +
facet_wrap(~mday)
vip::vip(rf_fit)
rf_testing_pred %>%
filter(.pred_1 > 0) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
rf_testing_pred %>%
filter(.pred_1 > 0.5) %>%
mutate(log_ret = log(next_ret+1)) %>%
mutate(cumret = cumsum(log_ret)) %>%
ggplot(aes(x=date, y=cumret)) + geom_line()
