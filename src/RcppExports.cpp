// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// testchar
NumericVector testchar(StringVector type);
RcppExport SEXP _quantpack_testchar(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(testchar(type));
    return rcpp_result_gen;
END_RCPP
}
// calc_bs_cpp_loop
NumericVector calc_bs_cpp_loop(NumericVector S, NumericVector K, NumericVector T, NumericVector R, NumericVector sig, StringVector type);
RcppExport SEXP _quantpack_calc_bs_cpp_loop(SEXP SSEXP, SEXP KSEXP, SEXP TSEXP, SEXP RSEXP, SEXP sigSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< StringVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_bs_cpp_loop(S, K, T, R, sig, type));
    return rcpp_result_gen;
END_RCPP
}
// calc_bs_cpp
NumericVector calc_bs_cpp(NumericVector S, NumericVector K, NumericVector T, NumericVector R, NumericVector sig, StringVector type);
RcppExport SEXP _quantpack_calc_bs_cpp(SEXP SSEXP, SEXP KSEXP, SEXP TSEXP, SEXP RSEXP, SEXP sigSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< StringVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_bs_cpp(S, K, T, R, sig, type));
    return rcpp_result_gen;
END_RCPP
}
// calc_bs_iv_cpp
NumericVector calc_bs_iv_cpp(NumericVector S, NumericVector K, NumericVector T, NumericVector r, NumericVector market, StringVector op_type);
RcppExport SEXP _quantpack_calc_bs_iv_cpp(SEXP SSEXP, SEXP KSEXP, SEXP TSEXP, SEXP rSEXP, SEXP marketSEXP, SEXP op_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type market(marketSEXP);
    Rcpp::traits::input_parameter< StringVector >::type op_type(op_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_bs_iv_cpp(S, K, T, r, market, op_type));
    return rcpp_result_gen;
END_RCPP
}
// calc_rolling_percentile
NumericVector calc_rolling_percentile(NumericVector x, int n, bool na_rm);
RcppExport SEXP _quantpack_calc_rolling_percentile(SEXP xSEXP, SEXP nSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_rolling_percentile(x, n, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quantpack_testchar", (DL_FUNC) &_quantpack_testchar, 1},
    {"_quantpack_calc_bs_cpp_loop", (DL_FUNC) &_quantpack_calc_bs_cpp_loop, 6},
    {"_quantpack_calc_bs_cpp", (DL_FUNC) &_quantpack_calc_bs_cpp, 6},
    {"_quantpack_calc_bs_iv_cpp", (DL_FUNC) &_quantpack_calc_bs_iv_cpp, 6},
    {"_quantpack_calc_rolling_percentile", (DL_FUNC) &_quantpack_calc_rolling_percentile, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_quantpack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
